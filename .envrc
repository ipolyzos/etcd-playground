ETCD_VER=v3.3.12
GOREMAN_VER=v0.0.10

# choose either URL
ETCD_GITHUB_URL=https://github.com/etcd-io/etcd/releases/download
GOREMAN_GITHUB_URL=https://github.com/mattn/goreman/releases/download

# If bin folder does not exist create it
if [ ! -d ${PWD}/bin ]; then
  mkdir -p ${PWD}/bin;
fi

# if etcd does not exist download it
function download_etcd {
	if [ ! -f bin/etcd ]
	then
		if [ ! -d ${PWD}/tmp ]; then
  			mkdir -p ${PWD}/tmp;
		fi

		##
		# Download etcd
		curl -sLo ${PWD}/tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz ${ETCD_GITHUB_URL}/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz 
		tar xzvf ${PWD}/tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz -C ${PWD}/bin/ --strip-components=1 --exclude='Documentation' --exclude='*.md'

		# cleanup tmp
		rm -f ${PWD}/tmp/
	fi
}

# if goreman does not exist download it
function download_goreman {
	if [ ! -f bin/goreman ]
	then

		create_tmp

		##
		# Download goreman                                                                                       
		curl -sLo ${PWD}/tmp/goreman_linux_amd64.zip ${GOREMAN_GITHUB_URL}/${GOREMAN_VER}/goreman_linux_amd64.zip
		unzip ${PWD}/tmp/goreman_linux_amd64.zip -d ${PWD}/bin
		
		# cleanup goreman
		rm ${PWD}/tmp/goreman_linux_amd64.zip 
	fi
}

# clean-up function
function cleanup {
	rm -rf ${PWD}/infra* ${PWD}/tmp ${PWD}/default.etcd	
}

# if PWD/tmp dir does not exist create it
function create_tmp {
	[[ -d ${PWD}/tmp ]] || mkdir ${PWD}/tmp
}

case "$OSTYPE" in
  linux*)   
  	download_etcd
  	download_goreman
  	cleanup
  	;;
  *) 
  	echo "unsupported OS : $OSTYPE" 
  	;;
esac

export HostIP=$(hostname -I | awk '{ print $1 }')

# set env PATH
export PATH="${PATH}:${PWD}/bin"